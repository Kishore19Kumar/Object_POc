// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: s3service.proto

#include "s3service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_s3service_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s3service_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_errorDetails;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s3service_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_s3authorization;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s3service_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_tags;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s3service_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_s3accesskey;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s3service_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_s3account;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s3service_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_s3object;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s3service_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_s3user;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s3service_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_s3bucket;
}  // namespace protobuf_s3service_2eproto
namespace s3service {
class s3authorizationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<s3authorization>
      _instance;
} _s3authorization_default_instance_;
class errorDetailsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<errorDetails>
      _instance;
} _errorDetails_default_instance_;
class s3accesskeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<s3accesskey>
      _instance;
} _s3accesskey_default_instance_;
class s3accountDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<s3account>
      _instance;
} _s3account_default_instance_;
class s3userDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<s3user>
      _instance;
} _s3user_default_instance_;
class tagsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<tags>
      _instance;
} _tags_default_instance_;
class s3bucketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<s3bucket>
      _instance;
} _s3bucket_default_instance_;
class s3objectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<s3object>
      _instance;
} _s3object_default_instance_;
class serviceRequestResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<serviceRequestResponse>
      _instance;
} _serviceRequestResponse_default_instance_;
}  // namespace s3service
namespace protobuf_s3service_2eproto {
static void InitDefaultss3authorization() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s3service::_s3authorization_default_instance_;
    new (ptr) ::s3service::s3authorization();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s3service::s3authorization::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_s3authorization =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultss3authorization}, {}};

static void InitDefaultserrorDetails() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s3service::_errorDetails_default_instance_;
    new (ptr) ::s3service::errorDetails();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s3service::errorDetails::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_errorDetails =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultserrorDetails}, {}};

static void InitDefaultss3accesskey() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s3service::_s3accesskey_default_instance_;
    new (ptr) ::s3service::s3accesskey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s3service::s3accesskey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_s3accesskey =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultss3accesskey}, {
      &protobuf_s3service_2eproto::scc_info_s3authorization.base,
      &protobuf_s3service_2eproto::scc_info_errorDetails.base,}};

static void InitDefaultss3account() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s3service::_s3account_default_instance_;
    new (ptr) ::s3service::s3account();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s3service::s3account::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_s3account =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultss3account}, {
      &protobuf_s3service_2eproto::scc_info_s3accesskey.base,
      &protobuf_s3service_2eproto::scc_info_errorDetails.base,}};

static void InitDefaultss3user() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s3service::_s3user_default_instance_;
    new (ptr) ::s3service::s3user();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s3service::s3user::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_s3user =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultss3user}, {
      &protobuf_s3service_2eproto::scc_info_s3authorization.base,
      &protobuf_s3service_2eproto::scc_info_errorDetails.base,}};

static void InitDefaultstags() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s3service::_tags_default_instance_;
    new (ptr) ::s3service::tags();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s3service::tags::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_tags =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultstags}, {}};

static void InitDefaultss3bucket() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s3service::_s3bucket_default_instance_;
    new (ptr) ::s3service::s3bucket();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s3service::s3bucket::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_s3bucket =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultss3bucket}, {
      &protobuf_s3service_2eproto::scc_info_s3authorization.base,
      &protobuf_s3service_2eproto::scc_info_tags.base,
      &protobuf_s3service_2eproto::scc_info_errorDetails.base,
      &protobuf_s3service_2eproto::scc_info_s3user.base,}};

static void InitDefaultss3object() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s3service::_s3object_default_instance_;
    new (ptr) ::s3service::s3object();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s3service::s3object::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_s3object =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultss3object}, {
      &protobuf_s3service_2eproto::scc_info_s3authorization.base,
      &protobuf_s3service_2eproto::scc_info_errorDetails.base,}};

static void InitDefaultsserviceRequestResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s3service::_serviceRequestResponse_default_instance_;
    new (ptr) ::s3service::serviceRequestResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s3service::serviceRequestResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_serviceRequestResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsserviceRequestResponse}, {
      &protobuf_s3service_2eproto::scc_info_s3user.base,
      &protobuf_s3service_2eproto::scc_info_s3account.base,
      &protobuf_s3service_2eproto::scc_info_s3bucket.base,
      &protobuf_s3service_2eproto::scc_info_s3object.base,
      &protobuf_s3service_2eproto::scc_info_s3accesskey.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_s3authorization.base);
  ::google::protobuf::internal::InitSCC(&scc_info_errorDetails.base);
  ::google::protobuf::internal::InitSCC(&scc_info_s3accesskey.base);
  ::google::protobuf::internal::InitSCC(&scc_info_s3account.base);
  ::google::protobuf::internal::InitSCC(&scc_info_s3user.base);
  ::google::protobuf::internal::InitSCC(&scc_info_tags.base);
  ::google::protobuf::internal::InitSCC(&scc_info_s3bucket.base);
  ::google::protobuf::internal::InitSCC(&scc_info_s3object.base);
  ::google::protobuf::internal::InitSCC(&scc_info_serviceRequestResponse.base);
}

::google::protobuf::Metadata file_level_metadata[9];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[6];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::s3authorization, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::s3authorization, accesskey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::s3authorization, secretkey_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::errorDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::errorDetails, errormessage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::errorDetails, errortype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::errorDetails, errorcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::errorDetails, hostid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::errorDetails, methodtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::errorDetails, resourcetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::errorDetails, key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::s3accesskey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::s3accesskey, accessop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::s3accesskey, auth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::s3accesskey, accesskeyid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::s3accesskey, secretkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::s3accesskey, accesskeyselector_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::s3accesskey, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::s3accesskey, createdate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::s3accesskey, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::s3accesskey, lastuseddate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::s3accesskey, servicename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::s3accesskey, region_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::s3accesskey, errorinfo_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::s3account, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::s3account, accop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::s3account, accountname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::s3account, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::s3account, accountid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::s3account, keys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::s3account, errorinfo_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::s3user, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::s3user, userop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::s3user, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::s3user, auth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::s3user, errorinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::s3user, newusername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::s3user, permission_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::s3user, test_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::s3user, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::s3user, createdate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::s3user, arn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::s3user, path_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::tags, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::tags, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::tags, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::s3bucket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::s3bucket, buckop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::s3bucket, auth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::s3bucket, tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::s3bucket, errorinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::s3bucket, bucketname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::s3bucket, currentuser_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::s3bucket, bucketowner_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::s3bucket, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::s3bucket, list_object_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::s3bucket, list_object_versions_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::s3object, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::s3object, objectop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::s3object, auth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::s3object, errorinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::s3object, bucketname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::s3object, objectname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::s3object, len_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::s3object, objectpath_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::s3object, tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::s3object, putid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::s3object, versionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::s3object, list_object_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::s3object, multipartlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::s3object, multipartno_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::s3object, multipartuniqueid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::serviceRequestResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::serviceRequestResponse, entitytype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::serviceRequestResponse, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::serviceRequestResponse, user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::serviceRequestResponse, account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::serviceRequestResponse, bucket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::serviceRequestResponse, object_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::s3service::serviceRequestResponse, accesskey_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::s3service::s3authorization)},
  { 7, -1, sizeof(::s3service::errorDetails)},
  { 19, -1, sizeof(::s3service::s3accesskey)},
  { 36, -1, sizeof(::s3service::s3account)},
  { 47, -1, sizeof(::s3service::s3user)},
  { 63, -1, sizeof(::s3service::tags)},
  { 70, -1, sizeof(::s3service::s3bucket)},
  { 85, -1, sizeof(::s3service::s3object)},
  { 104, -1, sizeof(::s3service::serviceRequestResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::s3service::_s3authorization_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s3service::_errorDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s3service::_s3accesskey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s3service::_s3account_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s3service::_s3user_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s3service::_tags_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s3service::_s3bucket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s3service::_s3object_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s3service::_serviceRequestResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "s3service.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017s3service.proto\022\ts3service\"7\n\017s3author"
      "ization\022\021\n\taccessKey\030\001 \001(\t\022\021\n\tsecretKey\030"
      "\002 \001(\t\"\221\001\n\014errorDetails\022\024\n\014errorMessage\030\001"
      " \001(\t\022\021\n\terrorType\030\002 \001(\t\022\021\n\terrorCode\030\003 \001"
      "(\t\022\016\n\006hostId\030\004 \001(\t\022\022\n\nmethodType\030\005 \001(\t\022\024"
      "\n\014resourceType\030\006 \001(\t\022\013\n\003key\030\007 \001(\t\"\265\003\n\013s3"
      "accesskey\022;\n\010accessOp\030\001 \001(\0162).s3service."
      "s3accesskey.accesskeyOperation\022(\n\004auth\030\002"
      " \003(\0132\032.s3service.s3authorization\022\023\n\013acce"
      "ssKeyId\030\003 \001(\t\022\021\n\tsecretKey\030\004 \001(\t\022\031\n\021acce"
      "ssKeySelector\030\005 \001(\t\022\020\n\010username\030\006 \001(\t\022\022\n"
      "\ncreateDate\030\007 \001(\t\022\016\n\006status\030\010 \001(\t\022\024\n\014las"
      "tUsedDate\030\t \001(\t\022\023\n\013ServiceName\030\n \001(\t\022\016\n\006"
      "Region\030\013 \001(\t\022*\n\terrorInfo\030\014 \003(\0132\027.s3serv"
      "ice.errorDetails\"_\n\022accesskeyOperation\022\016"
      "\n\nCREATE_KEY\020\000\022\016\n\nDELETE_KEY\020\001\022\025\n\021CHANGE"
      "_KEY_STATUS\020\002\022\022\n\016LAST_USED_TIME\020\003\"\211\002\n\ts3"
      "account\0224\n\005accOp\030\001 \001(\0162%.s3service.s3acc"
      "ount.accountOperation\022\023\n\013accountname\030\002 \001"
      "(\t\022\020\n\010password\030\003 \001(\t\022\021\n\taccountId\030\004 \001(\t\022"
      "$\n\004keys\030\005 \003(\0132\026.s3service.s3accesskey\022*\n"
      "\terrorInfo\030\006 \003(\0132\027.s3service.errorDetail"
      "s\":\n\020accountOperation\022\022\n\016CREATE_ACCOUNT\020"
      "\000\022\022\n\016DELETE_ACCOUNT\020\001\"\333\002\n\006s3user\022/\n\006user"
      "Op\030\001 \001(\0162\037.s3service.s3user.userOperatio"
      "n\022\020\n\010username\030\002 \001(\t\022(\n\004auth\030\003 \003(\0132\032.s3se"
      "rvice.s3authorization\022*\n\terrorInfo\030\004 \003(\013"
      "2\027.s3service.errorDetails\022\023\n\013newusername"
      "\030\005 \001(\t\022\022\n\npermission\030\006 \001(\t\022\014\n\004test\030\007 \001(\t"
      "\022\016\n\006userID\030\010 \001(\t\022\022\n\ncreateDate\030\t \001(\t\022\013\n\003"
      "arn\030\n \001(\t\022\014\n\004path\030\013 \001(\t\"B\n\ruserOperation"
      "\022\017\n\013CREATE_USER\020\000\022\017\n\013DELETE_USER\020\001\022\017\n\013UP"
      "DATE_USER\020\002\"\"\n\004tags\022\013\n\003key\030\001 \001(\t\022\r\n\005valu"
      "e\030\002 \001(\t\"\327\004\n\010s3bucket\0223\n\006buckOp\030\001 \001(\0162#.s"
      "3service.s3bucket.bucketOperation\022(\n\004aut"
      "h\030\002 \003(\0132\032.s3service.s3authorization\022\034\n\003t"
      "ag\030\003 \003(\0132\017.s3service.tags\022*\n\terrorInfo\030\004"
      " \003(\0132\027.s3service.errorDetails\022\022\n\nbucketN"
      "ame\030\005 \001(\t\022&\n\013currentUser\030\006 \001(\0132\021.s3servi"
      "ce.s3user\022&\n\013bucketOwner\030\007 \001(\0132\021.s3servi"
      "ce.s3user\022\017\n\007version\030\010 \001(\t\022\023\n\013list_objec"
      "t\030\t \001(\t\022\034\n\024list_object_versions\030\n \001(\t\"\371\001"
      "\n\017bucketOperation\022\021\n\rCREATE_BUCKET\020\000\022\021\n\r"
      "DELETE_BUCKET\020\001\022\017\n\013LIST_BUCKET\020\002\022\025\n\021PUT_"
      "BUCKET_POLICY\020\003\022\025\n\021GET_BUCKET_POLICY\020\004\022\026"
      "\n\022PUT_BUCKET_VERSION\020\005\022\026\n\022GET_BUCKET_VER"
      "SION\020\006\022\022\n\016PUT_BUCKET_TAG\020\007\022\022\n\016GET_BUCKET"
      "_TAG\020\010\022\017\n\013LIST_OBJECT\020\t\022\030\n\024LIST_OBJECT_V"
      "ERSIONS\020\n\"\223\005\n\010s3object\0225\n\010objectOp\030\001 \001(\016"
      "2#.s3service.s3object.objectOperation\022(\n"
      "\004auth\030\002 \003(\0132\032.s3service.s3authorization\022"
      "*\n\terrorInfo\030\003 \003(\0132\027.s3service.errorDeta"
      "ils\022\022\n\nbucketName\030\004 \001(\t\022\022\n\nobjectName\030\005 "
      "\001(\t\022\013\n\003len\030\006 \001(\005\022\022\n\nobjectPath\030\007 \001(\t\022\013\n\003"
      "tag\030\010 \001(\t\022\r\n\005putId\030\t \001(\t\022\021\n\tversionId\030\n "
      "\001(\t\022\023\n\013list_object\030\016 \001(\t\022\025\n\rmultiPartLis"
      "t\030\013 \003(\t\022\023\n\013multiPartNo\030\014 \001(\t\022\031\n\021multiPar"
      "tUniqueId\030\r \001(\t\"\245\002\n\017objectOperation\022\016\n\nP"
      "UT_OBJECT\020\000\022\016\n\nGET_OBJECT\020\001\022\021\n\rDELETE_OB"
      "JECT\020\002\022\030\n\024PUT_MULTIPART_OBJECT\020\003\022\030\n\024GET_"
      "MULTIPART_OBJECT\020\004\022\013\n\007PUT_TAG\020\005\022\013\n\007GET_T"
      "AG\020\006\022\013\n\007UN_USED\020\007\022\023\n\017GET_OBJECT_PROP\020\010\022\031"
      "\n\025INIT_MULTIPART_OBJECT\020\t\022\035\n\031COMPLETE_MU"
      "LTIPART_OBJECT\020\n\022\032\n\026ABORT_MULTIPART_OBJE"
      "CT\020\013\022\031\n\025LIST_MULTIPART_OBJECT\020\014\"\212\003\n\026serv"
      "iceRequestResponse\022C\n\nentityType\030\001 \001(\0162/"
      ".s3service.serviceRequestResponse.servic"
      "eEntity\022\021\n\trequestId\030\002 \001(\t\022\037\n\004user\030\003 \003(\013"
      "2\021.s3service.s3user\022%\n\007account\030\004 \003(\0132\024.s"
      "3service.s3account\022#\n\006bucket\030\005 \003(\0132\023.s3s"
      "ervice.s3bucket\022#\n\006object\030\006 \003(\0132\023.s3serv"
      "ice.s3object\022)\n\taccesskey\030\007 \003(\0132\026.s3serv"
      "ice.s3accesskey\"[\n\rserviceEntity\022\010\n\004USER"
      "\020\000\022\013\n\007ACCOUNT\020\001\022\n\n\006BUCKET\020\002\022\n\n\006OBJECT\020\003\022"
      "\014\n\010LOCATION\020\004\022\r\n\tACCESSKEY\020\005b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2996);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "s3service.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_s3service_2eproto
namespace s3service {
const ::google::protobuf::EnumDescriptor* s3accesskey_accesskeyOperation_descriptor() {
  protobuf_s3service_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_s3service_2eproto::file_level_enum_descriptors[0];
}
bool s3accesskey_accesskeyOperation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const s3accesskey_accesskeyOperation s3accesskey::CREATE_KEY;
const s3accesskey_accesskeyOperation s3accesskey::DELETE_KEY;
const s3accesskey_accesskeyOperation s3accesskey::CHANGE_KEY_STATUS;
const s3accesskey_accesskeyOperation s3accesskey::LAST_USED_TIME;
const s3accesskey_accesskeyOperation s3accesskey::accesskeyOperation_MIN;
const s3accesskey_accesskeyOperation s3accesskey::accesskeyOperation_MAX;
const int s3accesskey::accesskeyOperation_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* s3account_accountOperation_descriptor() {
  protobuf_s3service_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_s3service_2eproto::file_level_enum_descriptors[1];
}
bool s3account_accountOperation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const s3account_accountOperation s3account::CREATE_ACCOUNT;
const s3account_accountOperation s3account::DELETE_ACCOUNT;
const s3account_accountOperation s3account::accountOperation_MIN;
const s3account_accountOperation s3account::accountOperation_MAX;
const int s3account::accountOperation_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* s3user_userOperation_descriptor() {
  protobuf_s3service_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_s3service_2eproto::file_level_enum_descriptors[2];
}
bool s3user_userOperation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const s3user_userOperation s3user::CREATE_USER;
const s3user_userOperation s3user::DELETE_USER;
const s3user_userOperation s3user::UPDATE_USER;
const s3user_userOperation s3user::userOperation_MIN;
const s3user_userOperation s3user::userOperation_MAX;
const int s3user::userOperation_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* s3bucket_bucketOperation_descriptor() {
  protobuf_s3service_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_s3service_2eproto::file_level_enum_descriptors[3];
}
bool s3bucket_bucketOperation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const s3bucket_bucketOperation s3bucket::CREATE_BUCKET;
const s3bucket_bucketOperation s3bucket::DELETE_BUCKET;
const s3bucket_bucketOperation s3bucket::LIST_BUCKET;
const s3bucket_bucketOperation s3bucket::PUT_BUCKET_POLICY;
const s3bucket_bucketOperation s3bucket::GET_BUCKET_POLICY;
const s3bucket_bucketOperation s3bucket::PUT_BUCKET_VERSION;
const s3bucket_bucketOperation s3bucket::GET_BUCKET_VERSION;
const s3bucket_bucketOperation s3bucket::PUT_BUCKET_TAG;
const s3bucket_bucketOperation s3bucket::GET_BUCKET_TAG;
const s3bucket_bucketOperation s3bucket::LIST_OBJECT;
const s3bucket_bucketOperation s3bucket::LIST_OBJECT_VERSIONS;
const s3bucket_bucketOperation s3bucket::bucketOperation_MIN;
const s3bucket_bucketOperation s3bucket::bucketOperation_MAX;
const int s3bucket::bucketOperation_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* s3object_objectOperation_descriptor() {
  protobuf_s3service_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_s3service_2eproto::file_level_enum_descriptors[4];
}
bool s3object_objectOperation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const s3object_objectOperation s3object::PUT_OBJECT;
const s3object_objectOperation s3object::GET_OBJECT;
const s3object_objectOperation s3object::DELETE_OBJECT;
const s3object_objectOperation s3object::PUT_MULTIPART_OBJECT;
const s3object_objectOperation s3object::GET_MULTIPART_OBJECT;
const s3object_objectOperation s3object::PUT_TAG;
const s3object_objectOperation s3object::GET_TAG;
const s3object_objectOperation s3object::UN_USED;
const s3object_objectOperation s3object::GET_OBJECT_PROP;
const s3object_objectOperation s3object::INIT_MULTIPART_OBJECT;
const s3object_objectOperation s3object::COMPLETE_MULTIPART_OBJECT;
const s3object_objectOperation s3object::ABORT_MULTIPART_OBJECT;
const s3object_objectOperation s3object::LIST_MULTIPART_OBJECT;
const s3object_objectOperation s3object::objectOperation_MIN;
const s3object_objectOperation s3object::objectOperation_MAX;
const int s3object::objectOperation_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* serviceRequestResponse_serviceEntity_descriptor() {
  protobuf_s3service_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_s3service_2eproto::file_level_enum_descriptors[5];
}
bool serviceRequestResponse_serviceEntity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const serviceRequestResponse_serviceEntity serviceRequestResponse::USER;
const serviceRequestResponse_serviceEntity serviceRequestResponse::ACCOUNT;
const serviceRequestResponse_serviceEntity serviceRequestResponse::BUCKET;
const serviceRequestResponse_serviceEntity serviceRequestResponse::OBJECT;
const serviceRequestResponse_serviceEntity serviceRequestResponse::LOCATION;
const serviceRequestResponse_serviceEntity serviceRequestResponse::ACCESSKEY;
const serviceRequestResponse_serviceEntity serviceRequestResponse::serviceEntity_MIN;
const serviceRequestResponse_serviceEntity serviceRequestResponse::serviceEntity_MAX;
const int serviceRequestResponse::serviceEntity_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void s3authorization::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int s3authorization::kAccessKeyFieldNumber;
const int s3authorization::kSecretKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

s3authorization::s3authorization()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s3service_2eproto::scc_info_s3authorization.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:s3service.s3authorization)
}
s3authorization::s3authorization(const s3authorization& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  accesskey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.accesskey().size() > 0) {
    accesskey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.accesskey_);
  }
  secretkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.secretkey().size() > 0) {
    secretkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secretkey_);
  }
  // @@protoc_insertion_point(copy_constructor:s3service.s3authorization)
}

void s3authorization::SharedCtor() {
  accesskey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secretkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

s3authorization::~s3authorization() {
  // @@protoc_insertion_point(destructor:s3service.s3authorization)
  SharedDtor();
}

void s3authorization::SharedDtor() {
  accesskey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secretkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void s3authorization::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* s3authorization::descriptor() {
  ::protobuf_s3service_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s3service_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const s3authorization& s3authorization::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s3service_2eproto::scc_info_s3authorization.base);
  return *internal_default_instance();
}


void s3authorization::Clear() {
// @@protoc_insertion_point(message_clear_start:s3service.s3authorization)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accesskey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secretkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool s3authorization::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s3service.s3authorization)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string accessKey = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accesskey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->accesskey().data(), static_cast<int>(this->accesskey().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s3service.s3authorization.accessKey"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string secretKey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secretkey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->secretkey().data(), static_cast<int>(this->secretkey().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s3service.s3authorization.secretKey"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s3service.s3authorization)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s3service.s3authorization)
  return false;
#undef DO_
}

void s3authorization::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s3service.s3authorization)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string accessKey = 1;
  if (this->accesskey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->accesskey().data(), static_cast<int>(this->accesskey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3authorization.accessKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->accesskey(), output);
  }

  // string secretKey = 2;
  if (this->secretkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->secretkey().data(), static_cast<int>(this->secretkey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3authorization.secretKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->secretkey(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:s3service.s3authorization)
}

::google::protobuf::uint8* s3authorization::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:s3service.s3authorization)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string accessKey = 1;
  if (this->accesskey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->accesskey().data(), static_cast<int>(this->accesskey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3authorization.accessKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->accesskey(), target);
  }

  // string secretKey = 2;
  if (this->secretkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->secretkey().data(), static_cast<int>(this->secretkey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3authorization.secretKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->secretkey(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s3service.s3authorization)
  return target;
}

size_t s3authorization::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s3service.s3authorization)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string accessKey = 1;
  if (this->accesskey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->accesskey());
  }

  // string secretKey = 2;
  if (this->secretkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->secretkey());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void s3authorization::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s3service.s3authorization)
  GOOGLE_DCHECK_NE(&from, this);
  const s3authorization* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const s3authorization>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s3service.s3authorization)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s3service.s3authorization)
    MergeFrom(*source);
  }
}

void s3authorization::MergeFrom(const s3authorization& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s3service.s3authorization)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.accesskey().size() > 0) {

    accesskey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.accesskey_);
  }
  if (from.secretkey().size() > 0) {

    secretkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secretkey_);
  }
}

void s3authorization::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s3service.s3authorization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s3authorization::CopyFrom(const s3authorization& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s3service.s3authorization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s3authorization::IsInitialized() const {
  return true;
}

void s3authorization::Swap(s3authorization* other) {
  if (other == this) return;
  InternalSwap(other);
}
void s3authorization::InternalSwap(s3authorization* other) {
  using std::swap;
  accesskey_.Swap(&other->accesskey_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  secretkey_.Swap(&other->secretkey_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata s3authorization::GetMetadata() const {
  protobuf_s3service_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s3service_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void errorDetails::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int errorDetails::kErrorMessageFieldNumber;
const int errorDetails::kErrorTypeFieldNumber;
const int errorDetails::kErrorCodeFieldNumber;
const int errorDetails::kHostIdFieldNumber;
const int errorDetails::kMethodTypeFieldNumber;
const int errorDetails::kResourceTypeFieldNumber;
const int errorDetails::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

errorDetails::errorDetails()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s3service_2eproto::scc_info_errorDetails.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:s3service.errorDetails)
}
errorDetails::errorDetails(const errorDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errormessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.errormessage().size() > 0) {
    errormessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errormessage_);
  }
  errortype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.errortype().size() > 0) {
    errortype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errortype_);
  }
  errorcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.errorcode().size() > 0) {
    errorcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errorcode_);
  }
  hostid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hostid().size() > 0) {
    hostid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostid_);
  }
  methodtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.methodtype().size() > 0) {
    methodtype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.methodtype_);
  }
  resourcetype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.resourcetype().size() > 0) {
    resourcetype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resourcetype_);
  }
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  // @@protoc_insertion_point(copy_constructor:s3service.errorDetails)
}

void errorDetails::SharedCtor() {
  errormessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errortype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errorcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hostid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  methodtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resourcetype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

errorDetails::~errorDetails() {
  // @@protoc_insertion_point(destructor:s3service.errorDetails)
  SharedDtor();
}

void errorDetails::SharedDtor() {
  errormessage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errortype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errorcode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hostid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  methodtype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resourcetype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void errorDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* errorDetails::descriptor() {
  ::protobuf_s3service_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s3service_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const errorDetails& errorDetails::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s3service_2eproto::scc_info_errorDetails.base);
  return *internal_default_instance();
}


void errorDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:s3service.errorDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errormessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errortype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errorcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hostid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  methodtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resourcetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool errorDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s3service.errorDetails)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string errorMessage = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errormessage()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->errormessage().data(), static_cast<int>(this->errormessage().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s3service.errorDetails.errorMessage"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string errorType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errortype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->errortype().data(), static_cast<int>(this->errortype().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s3service.errorDetails.errorType"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string errorCode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errorcode()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->errorcode().data(), static_cast<int>(this->errorcode().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s3service.errorDetails.errorCode"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string hostId = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hostid().data(), static_cast<int>(this->hostid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s3service.errorDetails.hostId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string methodType = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_methodtype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->methodtype().data(), static_cast<int>(this->methodtype().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s3service.errorDetails.methodType"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string resourceType = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resourcetype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->resourcetype().data(), static_cast<int>(this->resourcetype().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s3service.errorDetails.resourceType"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string key = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s3service.errorDetails.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s3service.errorDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s3service.errorDetails)
  return false;
#undef DO_
}

void errorDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s3service.errorDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string errorMessage = 1;
  if (this->errormessage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errormessage().data(), static_cast<int>(this->errormessage().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.errorDetails.errorMessage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->errormessage(), output);
  }

  // string errorType = 2;
  if (this->errortype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errortype().data(), static_cast<int>(this->errortype().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.errorDetails.errorType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errortype(), output);
  }

  // string errorCode = 3;
  if (this->errorcode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errorcode().data(), static_cast<int>(this->errorcode().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.errorDetails.errorCode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->errorcode(), output);
  }

  // string hostId = 4;
  if (this->hostid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hostid().data(), static_cast<int>(this->hostid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.errorDetails.hostId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->hostid(), output);
  }

  // string methodType = 5;
  if (this->methodtype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->methodtype().data(), static_cast<int>(this->methodtype().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.errorDetails.methodType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->methodtype(), output);
  }

  // string resourceType = 6;
  if (this->resourcetype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resourcetype().data(), static_cast<int>(this->resourcetype().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.errorDetails.resourceType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->resourcetype(), output);
  }

  // string key = 7;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.errorDetails.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->key(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:s3service.errorDetails)
}

::google::protobuf::uint8* errorDetails::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:s3service.errorDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string errorMessage = 1;
  if (this->errormessage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errormessage().data(), static_cast<int>(this->errormessage().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.errorDetails.errorMessage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->errormessage(), target);
  }

  // string errorType = 2;
  if (this->errortype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errortype().data(), static_cast<int>(this->errortype().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.errorDetails.errorType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errortype(), target);
  }

  // string errorCode = 3;
  if (this->errorcode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errorcode().data(), static_cast<int>(this->errorcode().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.errorDetails.errorCode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->errorcode(), target);
  }

  // string hostId = 4;
  if (this->hostid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hostid().data(), static_cast<int>(this->hostid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.errorDetails.hostId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->hostid(), target);
  }

  // string methodType = 5;
  if (this->methodtype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->methodtype().data(), static_cast<int>(this->methodtype().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.errorDetails.methodType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->methodtype(), target);
  }

  // string resourceType = 6;
  if (this->resourcetype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resourcetype().data(), static_cast<int>(this->resourcetype().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.errorDetails.resourceType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->resourcetype(), target);
  }

  // string key = 7;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.errorDetails.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->key(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s3service.errorDetails)
  return target;
}

size_t errorDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s3service.errorDetails)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string errorMessage = 1;
  if (this->errormessage().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errormessage());
  }

  // string errorType = 2;
  if (this->errortype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errortype());
  }

  // string errorCode = 3;
  if (this->errorcode().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errorcode());
  }

  // string hostId = 4;
  if (this->hostid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hostid());
  }

  // string methodType = 5;
  if (this->methodtype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->methodtype());
  }

  // string resourceType = 6;
  if (this->resourcetype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->resourcetype());
  }

  // string key = 7;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void errorDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s3service.errorDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const errorDetails* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const errorDetails>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s3service.errorDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s3service.errorDetails)
    MergeFrom(*source);
  }
}

void errorDetails::MergeFrom(const errorDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s3service.errorDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.errormessage().size() > 0) {

    errormessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errormessage_);
  }
  if (from.errortype().size() > 0) {

    errortype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errortype_);
  }
  if (from.errorcode().size() > 0) {

    errorcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errorcode_);
  }
  if (from.hostid().size() > 0) {

    hostid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostid_);
  }
  if (from.methodtype().size() > 0) {

    methodtype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.methodtype_);
  }
  if (from.resourcetype().size() > 0) {

    resourcetype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resourcetype_);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void errorDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s3service.errorDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void errorDetails::CopyFrom(const errorDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s3service.errorDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool errorDetails::IsInitialized() const {
  return true;
}

void errorDetails::Swap(errorDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void errorDetails::InternalSwap(errorDetails* other) {
  using std::swap;
  errormessage_.Swap(&other->errormessage_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  errortype_.Swap(&other->errortype_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  errorcode_.Swap(&other->errorcode_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hostid_.Swap(&other->hostid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  methodtype_.Swap(&other->methodtype_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  resourcetype_.Swap(&other->resourcetype_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata errorDetails::GetMetadata() const {
  protobuf_s3service_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s3service_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void s3accesskey::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int s3accesskey::kAccessOpFieldNumber;
const int s3accesskey::kAuthFieldNumber;
const int s3accesskey::kAccessKeyIdFieldNumber;
const int s3accesskey::kSecretKeyFieldNumber;
const int s3accesskey::kAccessKeySelectorFieldNumber;
const int s3accesskey::kUsernameFieldNumber;
const int s3accesskey::kCreateDateFieldNumber;
const int s3accesskey::kStatusFieldNumber;
const int s3accesskey::kLastUsedDateFieldNumber;
const int s3accesskey::kServiceNameFieldNumber;
const int s3accesskey::kRegionFieldNumber;
const int s3accesskey::kErrorInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

s3accesskey::s3accesskey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s3service_2eproto::scc_info_s3accesskey.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:s3service.s3accesskey)
}
s3accesskey::s3accesskey(const s3accesskey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      auth_(from.auth_),
      errorinfo_(from.errorinfo_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  accesskeyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.accesskeyid().size() > 0) {
    accesskeyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.accesskeyid_);
  }
  secretkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.secretkey().size() > 0) {
    secretkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secretkey_);
  }
  accesskeyselector_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.accesskeyselector().size() > 0) {
    accesskeyselector_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.accesskeyselector_);
  }
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  createdate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.createdate().size() > 0) {
    createdate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.createdate_);
  }
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.status().size() > 0) {
    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  lastuseddate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.lastuseddate().size() > 0) {
    lastuseddate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lastuseddate_);
  }
  servicename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.servicename().size() > 0) {
    servicename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.servicename_);
  }
  region_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.region().size() > 0) {
    region_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.region_);
  }
  accessop_ = from.accessop_;
  // @@protoc_insertion_point(copy_constructor:s3service.s3accesskey)
}

void s3accesskey::SharedCtor() {
  accesskeyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secretkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accesskeyselector_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  createdate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lastuseddate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  servicename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accessop_ = 0;
}

s3accesskey::~s3accesskey() {
  // @@protoc_insertion_point(destructor:s3service.s3accesskey)
  SharedDtor();
}

void s3accesskey::SharedDtor() {
  accesskeyid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secretkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accesskeyselector_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  createdate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lastuseddate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  servicename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void s3accesskey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* s3accesskey::descriptor() {
  ::protobuf_s3service_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s3service_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const s3accesskey& s3accesskey::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s3service_2eproto::scc_info_s3accesskey.base);
  return *internal_default_instance();
}


void s3accesskey::Clear() {
// @@protoc_insertion_point(message_clear_start:s3service.s3accesskey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  auth_.Clear();
  errorinfo_.Clear();
  accesskeyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secretkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accesskeyselector_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  createdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lastuseddate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  servicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accessop_ = 0;
  _internal_metadata_.Clear();
}

bool s3accesskey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s3service.s3accesskey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .s3service.s3accesskey.accesskeyOperation accessOp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_accessop(static_cast< ::s3service::s3accesskey_accesskeyOperation >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .s3service.s3authorization auth = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_auth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string accessKeyId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accesskeyid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->accesskeyid().data(), static_cast<int>(this->accesskeyid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s3service.s3accesskey.accessKeyId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string secretKey = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secretkey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->secretkey().data(), static_cast<int>(this->secretkey().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s3service.s3accesskey.secretKey"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string accessKeySelector = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accesskeyselector()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->accesskeyselector().data(), static_cast<int>(this->accesskeyselector().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s3service.s3accesskey.accessKeySelector"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string username = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s3service.s3accesskey.username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string createDate = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_createdate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->createdate().data(), static_cast<int>(this->createdate().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s3service.s3accesskey.createDate"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string status = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->status().data(), static_cast<int>(this->status().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s3service.s3accesskey.status"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string lastUsedDate = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lastuseddate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lastuseddate().data(), static_cast<int>(this->lastuseddate().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s3service.s3accesskey.lastUsedDate"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ServiceName = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servicename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->servicename().data(), static_cast<int>(this->servicename().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s3service.s3accesskey.ServiceName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Region = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_region()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->region().data(), static_cast<int>(this->region().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s3service.s3accesskey.Region"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .s3service.errorDetails errorInfo = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_errorinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s3service.s3accesskey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s3service.s3accesskey)
  return false;
#undef DO_
}

void s3accesskey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s3service.s3accesskey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .s3service.s3accesskey.accesskeyOperation accessOp = 1;
  if (this->accessop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->accessop(), output);
  }

  // repeated .s3service.s3authorization auth = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->auth_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->auth(static_cast<int>(i)),
      output);
  }

  // string accessKeyId = 3;
  if (this->accesskeyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->accesskeyid().data(), static_cast<int>(this->accesskeyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3accesskey.accessKeyId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->accesskeyid(), output);
  }

  // string secretKey = 4;
  if (this->secretkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->secretkey().data(), static_cast<int>(this->secretkey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3accesskey.secretKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->secretkey(), output);
  }

  // string accessKeySelector = 5;
  if (this->accesskeyselector().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->accesskeyselector().data(), static_cast<int>(this->accesskeyselector().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3accesskey.accessKeySelector");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->accesskeyselector(), output);
  }

  // string username = 6;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3accesskey.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->username(), output);
  }

  // string createDate = 7;
  if (this->createdate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->createdate().data(), static_cast<int>(this->createdate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3accesskey.createDate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->createdate(), output);
  }

  // string status = 8;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), static_cast<int>(this->status().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3accesskey.status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->status(), output);
  }

  // string lastUsedDate = 9;
  if (this->lastuseddate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lastuseddate().data(), static_cast<int>(this->lastuseddate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3accesskey.lastUsedDate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->lastuseddate(), output);
  }

  // string ServiceName = 10;
  if (this->servicename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->servicename().data(), static_cast<int>(this->servicename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3accesskey.ServiceName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->servicename(), output);
  }

  // string Region = 11;
  if (this->region().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->region().data(), static_cast<int>(this->region().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3accesskey.Region");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->region(), output);
  }

  // repeated .s3service.errorDetails errorInfo = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->errorinfo_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12,
      this->errorinfo(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:s3service.s3accesskey)
}

::google::protobuf::uint8* s3accesskey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:s3service.s3accesskey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .s3service.s3accesskey.accesskeyOperation accessOp = 1;
  if (this->accessop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->accessop(), target);
  }

  // repeated .s3service.s3authorization auth = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->auth_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->auth(static_cast<int>(i)), deterministic, target);
  }

  // string accessKeyId = 3;
  if (this->accesskeyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->accesskeyid().data(), static_cast<int>(this->accesskeyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3accesskey.accessKeyId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->accesskeyid(), target);
  }

  // string secretKey = 4;
  if (this->secretkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->secretkey().data(), static_cast<int>(this->secretkey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3accesskey.secretKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->secretkey(), target);
  }

  // string accessKeySelector = 5;
  if (this->accesskeyselector().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->accesskeyselector().data(), static_cast<int>(this->accesskeyselector().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3accesskey.accessKeySelector");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->accesskeyselector(), target);
  }

  // string username = 6;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3accesskey.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->username(), target);
  }

  // string createDate = 7;
  if (this->createdate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->createdate().data(), static_cast<int>(this->createdate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3accesskey.createDate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->createdate(), target);
  }

  // string status = 8;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), static_cast<int>(this->status().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3accesskey.status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->status(), target);
  }

  // string lastUsedDate = 9;
  if (this->lastuseddate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lastuseddate().data(), static_cast<int>(this->lastuseddate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3accesskey.lastUsedDate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->lastuseddate(), target);
  }

  // string ServiceName = 10;
  if (this->servicename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->servicename().data(), static_cast<int>(this->servicename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3accesskey.ServiceName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->servicename(), target);
  }

  // string Region = 11;
  if (this->region().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->region().data(), static_cast<int>(this->region().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3accesskey.Region");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->region(), target);
  }

  // repeated .s3service.errorDetails errorInfo = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->errorinfo_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->errorinfo(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s3service.s3accesskey)
  return target;
}

size_t s3accesskey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s3service.s3accesskey)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .s3service.s3authorization auth = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->auth_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->auth(static_cast<int>(i)));
    }
  }

  // repeated .s3service.errorDetails errorInfo = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->errorinfo_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->errorinfo(static_cast<int>(i)));
    }
  }

  // string accessKeyId = 3;
  if (this->accesskeyid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->accesskeyid());
  }

  // string secretKey = 4;
  if (this->secretkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->secretkey());
  }

  // string accessKeySelector = 5;
  if (this->accesskeyselector().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->accesskeyselector());
  }

  // string username = 6;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // string createDate = 7;
  if (this->createdate().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->createdate());
  }

  // string status = 8;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->status());
  }

  // string lastUsedDate = 9;
  if (this->lastuseddate().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lastuseddate());
  }

  // string ServiceName = 10;
  if (this->servicename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->servicename());
  }

  // string Region = 11;
  if (this->region().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->region());
  }

  // .s3service.s3accesskey.accesskeyOperation accessOp = 1;
  if (this->accessop() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->accessop());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void s3accesskey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s3service.s3accesskey)
  GOOGLE_DCHECK_NE(&from, this);
  const s3accesskey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const s3accesskey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s3service.s3accesskey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s3service.s3accesskey)
    MergeFrom(*source);
  }
}

void s3accesskey::MergeFrom(const s3accesskey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s3service.s3accesskey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  auth_.MergeFrom(from.auth_);
  errorinfo_.MergeFrom(from.errorinfo_);
  if (from.accesskeyid().size() > 0) {

    accesskeyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.accesskeyid_);
  }
  if (from.secretkey().size() > 0) {

    secretkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secretkey_);
  }
  if (from.accesskeyselector().size() > 0) {

    accesskeyselector_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.accesskeyselector_);
  }
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.createdate().size() > 0) {

    createdate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.createdate_);
  }
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from.lastuseddate().size() > 0) {

    lastuseddate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lastuseddate_);
  }
  if (from.servicename().size() > 0) {

    servicename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.servicename_);
  }
  if (from.region().size() > 0) {

    region_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.region_);
  }
  if (from.accessop() != 0) {
    set_accessop(from.accessop());
  }
}

void s3accesskey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s3service.s3accesskey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s3accesskey::CopyFrom(const s3accesskey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s3service.s3accesskey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s3accesskey::IsInitialized() const {
  return true;
}

void s3accesskey::Swap(s3accesskey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void s3accesskey::InternalSwap(s3accesskey* other) {
  using std::swap;
  CastToBase(&auth_)->InternalSwap(CastToBase(&other->auth_));
  CastToBase(&errorinfo_)->InternalSwap(CastToBase(&other->errorinfo_));
  accesskeyid_.Swap(&other->accesskeyid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  secretkey_.Swap(&other->secretkey_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  accesskeyselector_.Swap(&other->accesskeyselector_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  createdate_.Swap(&other->createdate_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  status_.Swap(&other->status_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  lastuseddate_.Swap(&other->lastuseddate_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  servicename_.Swap(&other->servicename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  region_.Swap(&other->region_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(accessop_, other->accessop_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata s3accesskey::GetMetadata() const {
  protobuf_s3service_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s3service_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void s3account::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int s3account::kAccOpFieldNumber;
const int s3account::kAccountnameFieldNumber;
const int s3account::kPasswordFieldNumber;
const int s3account::kAccountIdFieldNumber;
const int s3account::kKeysFieldNumber;
const int s3account::kErrorInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

s3account::s3account()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s3service_2eproto::scc_info_s3account.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:s3service.s3account)
}
s3account::s3account(const s3account& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      keys_(from.keys_),
      errorinfo_(from.errorinfo_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  accountname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.accountname().size() > 0) {
    accountname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.accountname_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  accountid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.accountid().size() > 0) {
    accountid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.accountid_);
  }
  accop_ = from.accop_;
  // @@protoc_insertion_point(copy_constructor:s3service.s3account)
}

void s3account::SharedCtor() {
  accountname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accountid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accop_ = 0;
}

s3account::~s3account() {
  // @@protoc_insertion_point(destructor:s3service.s3account)
  SharedDtor();
}

void s3account::SharedDtor() {
  accountname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accountid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void s3account::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* s3account::descriptor() {
  ::protobuf_s3service_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s3service_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const s3account& s3account::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s3service_2eproto::scc_info_s3account.base);
  return *internal_default_instance();
}


void s3account::Clear() {
// @@protoc_insertion_point(message_clear_start:s3service.s3account)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  errorinfo_.Clear();
  accountname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accountid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accop_ = 0;
  _internal_metadata_.Clear();
}

bool s3account::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s3service.s3account)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .s3service.s3account.accountOperation accOp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_accop(static_cast< ::s3service::s3account_accountOperation >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string accountname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->accountname().data(), static_cast<int>(this->accountname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s3service.s3account.accountname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string password = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s3service.s3account.password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string accountId = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->accountid().data(), static_cast<int>(this->accountid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s3service.s3account.accountId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .s3service.s3accesskey keys = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .s3service.errorDetails errorInfo = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_errorinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s3service.s3account)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s3service.s3account)
  return false;
#undef DO_
}

void s3account::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s3service.s3account)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .s3service.s3account.accountOperation accOp = 1;
  if (this->accop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->accop(), output);
  }

  // string accountname = 2;
  if (this->accountname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->accountname().data(), static_cast<int>(this->accountname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3account.accountname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->accountname(), output);
  }

  // string password = 3;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3account.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->password(), output);
  }

  // string accountId = 4;
  if (this->accountid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->accountid().data(), static_cast<int>(this->accountid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3account.accountId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->accountid(), output);
  }

  // repeated .s3service.s3accesskey keys = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->keys_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->keys(static_cast<int>(i)),
      output);
  }

  // repeated .s3service.errorDetails errorInfo = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->errorinfo_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->errorinfo(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:s3service.s3account)
}

::google::protobuf::uint8* s3account::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:s3service.s3account)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .s3service.s3account.accountOperation accOp = 1;
  if (this->accop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->accop(), target);
  }

  // string accountname = 2;
  if (this->accountname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->accountname().data(), static_cast<int>(this->accountname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3account.accountname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->accountname(), target);
  }

  // string password = 3;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3account.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  // string accountId = 4;
  if (this->accountid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->accountid().data(), static_cast<int>(this->accountid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3account.accountId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->accountid(), target);
  }

  // repeated .s3service.s3accesskey keys = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->keys_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->keys(static_cast<int>(i)), deterministic, target);
  }

  // repeated .s3service.errorDetails errorInfo = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->errorinfo_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->errorinfo(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s3service.s3account)
  return target;
}

size_t s3account::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s3service.s3account)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .s3service.s3accesskey keys = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->keys_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->keys(static_cast<int>(i)));
    }
  }

  // repeated .s3service.errorDetails errorInfo = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->errorinfo_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->errorinfo(static_cast<int>(i)));
    }
  }

  // string accountname = 2;
  if (this->accountname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->accountname());
  }

  // string password = 3;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  // string accountId = 4;
  if (this->accountid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->accountid());
  }

  // .s3service.s3account.accountOperation accOp = 1;
  if (this->accop() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->accop());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void s3account::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s3service.s3account)
  GOOGLE_DCHECK_NE(&from, this);
  const s3account* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const s3account>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s3service.s3account)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s3service.s3account)
    MergeFrom(*source);
  }
}

void s3account::MergeFrom(const s3account& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s3service.s3account)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  errorinfo_.MergeFrom(from.errorinfo_);
  if (from.accountname().size() > 0) {

    accountname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.accountname_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.accountid().size() > 0) {

    accountid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.accountid_);
  }
  if (from.accop() != 0) {
    set_accop(from.accop());
  }
}

void s3account::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s3service.s3account)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s3account::CopyFrom(const s3account& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s3service.s3account)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s3account::IsInitialized() const {
  return true;
}

void s3account::Swap(s3account* other) {
  if (other == this) return;
  InternalSwap(other);
}
void s3account::InternalSwap(s3account* other) {
  using std::swap;
  CastToBase(&keys_)->InternalSwap(CastToBase(&other->keys_));
  CastToBase(&errorinfo_)->InternalSwap(CastToBase(&other->errorinfo_));
  accountname_.Swap(&other->accountname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  accountid_.Swap(&other->accountid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(accop_, other->accop_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata s3account::GetMetadata() const {
  protobuf_s3service_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s3service_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void s3user::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int s3user::kUserOpFieldNumber;
const int s3user::kUsernameFieldNumber;
const int s3user::kAuthFieldNumber;
const int s3user::kErrorInfoFieldNumber;
const int s3user::kNewusernameFieldNumber;
const int s3user::kPermissionFieldNumber;
const int s3user::kTestFieldNumber;
const int s3user::kUserIDFieldNumber;
const int s3user::kCreateDateFieldNumber;
const int s3user::kArnFieldNumber;
const int s3user::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

s3user::s3user()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s3service_2eproto::scc_info_s3user.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:s3service.s3user)
}
s3user::s3user(const s3user& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      auth_(from.auth_),
      errorinfo_(from.errorinfo_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  newusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.newusername().size() > 0) {
    newusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.newusername_);
  }
  permission_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.permission().size() > 0) {
    permission_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.permission_);
  }
  test_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.test().size() > 0) {
    test_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.test_);
  }
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.userid().size() > 0) {
    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  createdate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.createdate().size() > 0) {
    createdate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.createdate_);
  }
  arn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.arn().size() > 0) {
    arn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.arn_);
  }
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  userop_ = from.userop_;
  // @@protoc_insertion_point(copy_constructor:s3service.s3user)
}

void s3user::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  newusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  permission_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  test_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  createdate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  arn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userop_ = 0;
}

s3user::~s3user() {
  // @@protoc_insertion_point(destructor:s3service.s3user)
  SharedDtor();
}

void s3user::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  newusername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  permission_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  test_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  createdate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  arn_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void s3user::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* s3user::descriptor() {
  ::protobuf_s3service_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s3service_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const s3user& s3user::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s3service_2eproto::scc_info_s3user.base);
  return *internal_default_instance();
}


void s3user::Clear() {
// @@protoc_insertion_point(message_clear_start:s3service.s3user)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  auth_.Clear();
  errorinfo_.Clear();
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  newusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  permission_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  test_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  createdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  arn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userop_ = 0;
  _internal_metadata_.Clear();
}

bool s3user::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s3service.s3user)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .s3service.s3user.userOperation userOp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_userop(static_cast< ::s3service::s3user_userOperation >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string username = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s3service.s3user.username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .s3service.s3authorization auth = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_auth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .s3service.errorDetails errorInfo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_errorinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string newusername = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newusername()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->newusername().data(), static_cast<int>(this->newusername().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s3service.s3user.newusername"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string permission = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_permission()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->permission().data(), static_cast<int>(this->permission().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s3service.s3user.permission"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string test = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_test()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->test().data(), static_cast<int>(this->test().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s3service.s3user.test"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string userID = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->userid().data(), static_cast<int>(this->userid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s3service.s3user.userID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string createDate = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_createdate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->createdate().data(), static_cast<int>(this->createdate().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s3service.s3user.createDate"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string arn = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_arn()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->arn().data(), static_cast<int>(this->arn().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s3service.s3user.arn"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string path = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s3service.s3user.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s3service.s3user)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s3service.s3user)
  return false;
#undef DO_
}

void s3user::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s3service.s3user)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .s3service.s3user.userOperation userOp = 1;
  if (this->userop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->userop(), output);
  }

  // string username = 2;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3user.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  // repeated .s3service.s3authorization auth = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->auth_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->auth(static_cast<int>(i)),
      output);
  }

  // repeated .s3service.errorDetails errorInfo = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->errorinfo_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->errorinfo(static_cast<int>(i)),
      output);
  }

  // string newusername = 5;
  if (this->newusername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->newusername().data(), static_cast<int>(this->newusername().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3user.newusername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->newusername(), output);
  }

  // string permission = 6;
  if (this->permission().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->permission().data(), static_cast<int>(this->permission().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3user.permission");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->permission(), output);
  }

  // string test = 7;
  if (this->test().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->test().data(), static_cast<int>(this->test().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3user.test");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->test(), output);
  }

  // string userID = 8;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), static_cast<int>(this->userid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3user.userID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->userid(), output);
  }

  // string createDate = 9;
  if (this->createdate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->createdate().data(), static_cast<int>(this->createdate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3user.createDate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->createdate(), output);
  }

  // string arn = 10;
  if (this->arn().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->arn().data(), static_cast<int>(this->arn().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3user.arn");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->arn(), output);
  }

  // string path = 11;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3user.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->path(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:s3service.s3user)
}

::google::protobuf::uint8* s3user::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:s3service.s3user)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .s3service.s3user.userOperation userOp = 1;
  if (this->userop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->userop(), target);
  }

  // string username = 2;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3user.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // repeated .s3service.s3authorization auth = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->auth_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->auth(static_cast<int>(i)), deterministic, target);
  }

  // repeated .s3service.errorDetails errorInfo = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->errorinfo_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->errorinfo(static_cast<int>(i)), deterministic, target);
  }

  // string newusername = 5;
  if (this->newusername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->newusername().data(), static_cast<int>(this->newusername().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3user.newusername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->newusername(), target);
  }

  // string permission = 6;
  if (this->permission().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->permission().data(), static_cast<int>(this->permission().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3user.permission");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->permission(), target);
  }

  // string test = 7;
  if (this->test().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->test().data(), static_cast<int>(this->test().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3user.test");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->test(), target);
  }

  // string userID = 8;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), static_cast<int>(this->userid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3user.userID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->userid(), target);
  }

  // string createDate = 9;
  if (this->createdate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->createdate().data(), static_cast<int>(this->createdate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3user.createDate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->createdate(), target);
  }

  // string arn = 10;
  if (this->arn().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->arn().data(), static_cast<int>(this->arn().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3user.arn");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->arn(), target);
  }

  // string path = 11;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3user.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->path(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s3service.s3user)
  return target;
}

size_t s3user::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s3service.s3user)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .s3service.s3authorization auth = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->auth_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->auth(static_cast<int>(i)));
    }
  }

  // repeated .s3service.errorDetails errorInfo = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->errorinfo_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->errorinfo(static_cast<int>(i)));
    }
  }

  // string username = 2;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // string newusername = 5;
  if (this->newusername().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->newusername());
  }

  // string permission = 6;
  if (this->permission().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->permission());
  }

  // string test = 7;
  if (this->test().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->test());
  }

  // string userID = 8;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  // string createDate = 9;
  if (this->createdate().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->createdate());
  }

  // string arn = 10;
  if (this->arn().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->arn());
  }

  // string path = 11;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // .s3service.s3user.userOperation userOp = 1;
  if (this->userop() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->userop());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void s3user::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s3service.s3user)
  GOOGLE_DCHECK_NE(&from, this);
  const s3user* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const s3user>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s3service.s3user)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s3service.s3user)
    MergeFrom(*source);
  }
}

void s3user::MergeFrom(const s3user& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s3service.s3user)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  auth_.MergeFrom(from.auth_);
  errorinfo_.MergeFrom(from.errorinfo_);
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.newusername().size() > 0) {

    newusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.newusername_);
  }
  if (from.permission().size() > 0) {

    permission_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.permission_);
  }
  if (from.test().size() > 0) {

    test_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.test_);
  }
  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  if (from.createdate().size() > 0) {

    createdate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.createdate_);
  }
  if (from.arn().size() > 0) {

    arn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.arn_);
  }
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.userop() != 0) {
    set_userop(from.userop());
  }
}

void s3user::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s3service.s3user)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s3user::CopyFrom(const s3user& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s3service.s3user)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s3user::IsInitialized() const {
  return true;
}

void s3user::Swap(s3user* other) {
  if (other == this) return;
  InternalSwap(other);
}
void s3user::InternalSwap(s3user* other) {
  using std::swap;
  CastToBase(&auth_)->InternalSwap(CastToBase(&other->auth_));
  CastToBase(&errorinfo_)->InternalSwap(CastToBase(&other->errorinfo_));
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  newusername_.Swap(&other->newusername_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  permission_.Swap(&other->permission_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  test_.Swap(&other->test_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  userid_.Swap(&other->userid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  createdate_.Swap(&other->createdate_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  arn_.Swap(&other->arn_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  path_.Swap(&other->path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(userop_, other->userop_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata s3user::GetMetadata() const {
  protobuf_s3service_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s3service_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void tags::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tags::kKeyFieldNumber;
const int tags::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tags::tags()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s3service_2eproto::scc_info_tags.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:s3service.tags)
}
tags::tags(const tags& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:s3service.tags)
}

void tags::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

tags::~tags() {
  // @@protoc_insertion_point(destructor:s3service.tags)
  SharedDtor();
}

void tags::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void tags::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* tags::descriptor() {
  ::protobuf_s3service_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s3service_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const tags& tags::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s3service_2eproto::scc_info_tags.base);
  return *internal_default_instance();
}


void tags::Clear() {
// @@protoc_insertion_point(message_clear_start:s3service.tags)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool tags::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s3service.tags)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s3service.tags.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s3service.tags.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s3service.tags)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s3service.tags)
  return false;
#undef DO_
}

void tags::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s3service.tags)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.tags.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.tags.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:s3service.tags)
}

::google::protobuf::uint8* tags::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:s3service.tags)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.tags.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.tags.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s3service.tags)
  return target;
}

size_t tags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s3service.tags)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void tags::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s3service.tags)
  GOOGLE_DCHECK_NE(&from, this);
  const tags* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tags>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s3service.tags)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s3service.tags)
    MergeFrom(*source);
  }
}

void tags::MergeFrom(const tags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s3service.tags)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void tags::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s3service.tags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tags::CopyFrom(const tags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s3service.tags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tags::IsInitialized() const {
  return true;
}

void tags::Swap(tags* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tags::InternalSwap(tags* other) {
  using std::swap;
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata tags::GetMetadata() const {
  protobuf_s3service_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s3service_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void s3bucket::InitAsDefaultInstance() {
  ::s3service::_s3bucket_default_instance_._instance.get_mutable()->currentuser_ = const_cast< ::s3service::s3user*>(
      ::s3service::s3user::internal_default_instance());
  ::s3service::_s3bucket_default_instance_._instance.get_mutable()->bucketowner_ = const_cast< ::s3service::s3user*>(
      ::s3service::s3user::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int s3bucket::kBuckOpFieldNumber;
const int s3bucket::kAuthFieldNumber;
const int s3bucket::kTagFieldNumber;
const int s3bucket::kErrorInfoFieldNumber;
const int s3bucket::kBucketNameFieldNumber;
const int s3bucket::kCurrentUserFieldNumber;
const int s3bucket::kBucketOwnerFieldNumber;
const int s3bucket::kVersionFieldNumber;
const int s3bucket::kListObjectFieldNumber;
const int s3bucket::kListObjectVersionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

s3bucket::s3bucket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s3service_2eproto::scc_info_s3bucket.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:s3service.s3bucket)
}
s3bucket::s3bucket(const s3bucket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      auth_(from.auth_),
      tag_(from.tag_),
      errorinfo_(from.errorinfo_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bucketname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bucketname().size() > 0) {
    bucketname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bucketname_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  list_object_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.list_object().size() > 0) {
    list_object_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.list_object_);
  }
  list_object_versions_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.list_object_versions().size() > 0) {
    list_object_versions_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.list_object_versions_);
  }
  if (from.has_currentuser()) {
    currentuser_ = new ::s3service::s3user(*from.currentuser_);
  } else {
    currentuser_ = NULL;
  }
  if (from.has_bucketowner()) {
    bucketowner_ = new ::s3service::s3user(*from.bucketowner_);
  } else {
    bucketowner_ = NULL;
  }
  buckop_ = from.buckop_;
  // @@protoc_insertion_point(copy_constructor:s3service.s3bucket)
}

void s3bucket::SharedCtor() {
  bucketname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  list_object_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  list_object_versions_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&currentuser_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&buckop_) -
      reinterpret_cast<char*>(&currentuser_)) + sizeof(buckop_));
}

s3bucket::~s3bucket() {
  // @@protoc_insertion_point(destructor:s3service.s3bucket)
  SharedDtor();
}

void s3bucket::SharedDtor() {
  bucketname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  list_object_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  list_object_versions_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete currentuser_;
  if (this != internal_default_instance()) delete bucketowner_;
}

void s3bucket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* s3bucket::descriptor() {
  ::protobuf_s3service_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s3service_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const s3bucket& s3bucket::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s3service_2eproto::scc_info_s3bucket.base);
  return *internal_default_instance();
}


void s3bucket::Clear() {
// @@protoc_insertion_point(message_clear_start:s3service.s3bucket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  auth_.Clear();
  tag_.Clear();
  errorinfo_.Clear();
  bucketname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  list_object_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  list_object_versions_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && currentuser_ != NULL) {
    delete currentuser_;
  }
  currentuser_ = NULL;
  if (GetArenaNoVirtual() == NULL && bucketowner_ != NULL) {
    delete bucketowner_;
  }
  bucketowner_ = NULL;
  buckop_ = 0;
  _internal_metadata_.Clear();
}

bool s3bucket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s3service.s3bucket)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .s3service.s3bucket.bucketOperation buckOp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_buckop(static_cast< ::s3service::s3bucket_bucketOperation >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .s3service.s3authorization auth = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_auth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .s3service.tags tag = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .s3service.errorDetails errorInfo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_errorinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string bucketName = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bucketname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bucketname().data(), static_cast<int>(this->bucketname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s3service.s3bucket.bucketName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .s3service.s3user currentUser = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_currentuser()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .s3service.s3user bucketOwner = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bucketowner()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s3service.s3bucket.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string list_object = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_list_object()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->list_object().data(), static_cast<int>(this->list_object().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s3service.s3bucket.list_object"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string list_object_versions = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_list_object_versions()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->list_object_versions().data(), static_cast<int>(this->list_object_versions().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s3service.s3bucket.list_object_versions"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s3service.s3bucket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s3service.s3bucket)
  return false;
#undef DO_
}

void s3bucket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s3service.s3bucket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .s3service.s3bucket.bucketOperation buckOp = 1;
  if (this->buckop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->buckop(), output);
  }

  // repeated .s3service.s3authorization auth = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->auth_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->auth(static_cast<int>(i)),
      output);
  }

  // repeated .s3service.tags tag = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tag_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->tag(static_cast<int>(i)),
      output);
  }

  // repeated .s3service.errorDetails errorInfo = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->errorinfo_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->errorinfo(static_cast<int>(i)),
      output);
  }

  // string bucketName = 5;
  if (this->bucketname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bucketname().data(), static_cast<int>(this->bucketname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3bucket.bucketName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->bucketname(), output);
  }

  // .s3service.s3user currentUser = 6;
  if (this->has_currentuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_currentuser(), output);
  }

  // .s3service.s3user bucketOwner = 7;
  if (this->has_bucketowner()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_bucketowner(), output);
  }

  // string version = 8;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3bucket.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->version(), output);
  }

  // string list_object = 9;
  if (this->list_object().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->list_object().data(), static_cast<int>(this->list_object().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3bucket.list_object");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->list_object(), output);
  }

  // string list_object_versions = 10;
  if (this->list_object_versions().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->list_object_versions().data(), static_cast<int>(this->list_object_versions().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3bucket.list_object_versions");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->list_object_versions(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:s3service.s3bucket)
}

::google::protobuf::uint8* s3bucket::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:s3service.s3bucket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .s3service.s3bucket.bucketOperation buckOp = 1;
  if (this->buckop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->buckop(), target);
  }

  // repeated .s3service.s3authorization auth = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->auth_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->auth(static_cast<int>(i)), deterministic, target);
  }

  // repeated .s3service.tags tag = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tag_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->tag(static_cast<int>(i)), deterministic, target);
  }

  // repeated .s3service.errorDetails errorInfo = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->errorinfo_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->errorinfo(static_cast<int>(i)), deterministic, target);
  }

  // string bucketName = 5;
  if (this->bucketname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bucketname().data(), static_cast<int>(this->bucketname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3bucket.bucketName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->bucketname(), target);
  }

  // .s3service.s3user currentUser = 6;
  if (this->has_currentuser()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_currentuser(), deterministic, target);
  }

  // .s3service.s3user bucketOwner = 7;
  if (this->has_bucketowner()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_bucketowner(), deterministic, target);
  }

  // string version = 8;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3bucket.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->version(), target);
  }

  // string list_object = 9;
  if (this->list_object().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->list_object().data(), static_cast<int>(this->list_object().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3bucket.list_object");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->list_object(), target);
  }

  // string list_object_versions = 10;
  if (this->list_object_versions().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->list_object_versions().data(), static_cast<int>(this->list_object_versions().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3bucket.list_object_versions");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->list_object_versions(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s3service.s3bucket)
  return target;
}

size_t s3bucket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s3service.s3bucket)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .s3service.s3authorization auth = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->auth_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->auth(static_cast<int>(i)));
    }
  }

  // repeated .s3service.tags tag = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->tag_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tag(static_cast<int>(i)));
    }
  }

  // repeated .s3service.errorDetails errorInfo = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->errorinfo_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->errorinfo(static_cast<int>(i)));
    }
  }

  // string bucketName = 5;
  if (this->bucketname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bucketname());
  }

  // string version = 8;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // string list_object = 9;
  if (this->list_object().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->list_object());
  }

  // string list_object_versions = 10;
  if (this->list_object_versions().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->list_object_versions());
  }

  // .s3service.s3user currentUser = 6;
  if (this->has_currentuser()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *currentuser_);
  }

  // .s3service.s3user bucketOwner = 7;
  if (this->has_bucketowner()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *bucketowner_);
  }

  // .s3service.s3bucket.bucketOperation buckOp = 1;
  if (this->buckop() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->buckop());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void s3bucket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s3service.s3bucket)
  GOOGLE_DCHECK_NE(&from, this);
  const s3bucket* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const s3bucket>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s3service.s3bucket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s3service.s3bucket)
    MergeFrom(*source);
  }
}

void s3bucket::MergeFrom(const s3bucket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s3service.s3bucket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  auth_.MergeFrom(from.auth_);
  tag_.MergeFrom(from.tag_);
  errorinfo_.MergeFrom(from.errorinfo_);
  if (from.bucketname().size() > 0) {

    bucketname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bucketname_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.list_object().size() > 0) {

    list_object_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.list_object_);
  }
  if (from.list_object_versions().size() > 0) {

    list_object_versions_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.list_object_versions_);
  }
  if (from.has_currentuser()) {
    mutable_currentuser()->::s3service::s3user::MergeFrom(from.currentuser());
  }
  if (from.has_bucketowner()) {
    mutable_bucketowner()->::s3service::s3user::MergeFrom(from.bucketowner());
  }
  if (from.buckop() != 0) {
    set_buckop(from.buckop());
  }
}

void s3bucket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s3service.s3bucket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s3bucket::CopyFrom(const s3bucket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s3service.s3bucket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s3bucket::IsInitialized() const {
  return true;
}

void s3bucket::Swap(s3bucket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void s3bucket::InternalSwap(s3bucket* other) {
  using std::swap;
  CastToBase(&auth_)->InternalSwap(CastToBase(&other->auth_));
  CastToBase(&tag_)->InternalSwap(CastToBase(&other->tag_));
  CastToBase(&errorinfo_)->InternalSwap(CastToBase(&other->errorinfo_));
  bucketname_.Swap(&other->bucketname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  list_object_.Swap(&other->list_object_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  list_object_versions_.Swap(&other->list_object_versions_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(currentuser_, other->currentuser_);
  swap(bucketowner_, other->bucketowner_);
  swap(buckop_, other->buckop_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata s3bucket::GetMetadata() const {
  protobuf_s3service_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s3service_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void s3object::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int s3object::kObjectOpFieldNumber;
const int s3object::kAuthFieldNumber;
const int s3object::kErrorInfoFieldNumber;
const int s3object::kBucketNameFieldNumber;
const int s3object::kObjectNameFieldNumber;
const int s3object::kLenFieldNumber;
const int s3object::kObjectPathFieldNumber;
const int s3object::kTagFieldNumber;
const int s3object::kPutIdFieldNumber;
const int s3object::kVersionIdFieldNumber;
const int s3object::kListObjectFieldNumber;
const int s3object::kMultiPartListFieldNumber;
const int s3object::kMultiPartNoFieldNumber;
const int s3object::kMultiPartUniqueIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

s3object::s3object()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s3service_2eproto::scc_info_s3object.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:s3service.s3object)
}
s3object::s3object(const s3object& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      auth_(from.auth_),
      errorinfo_(from.errorinfo_),
      multipartlist_(from.multipartlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bucketname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bucketname().size() > 0) {
    bucketname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bucketname_);
  }
  objectname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.objectname().size() > 0) {
    objectname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.objectname_);
  }
  objectpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.objectpath().size() > 0) {
    objectpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.objectpath_);
  }
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tag().size() > 0) {
    tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  putid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.putid().size() > 0) {
    putid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.putid_);
  }
  versionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.versionid().size() > 0) {
    versionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.versionid_);
  }
  multipartno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.multipartno().size() > 0) {
    multipartno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.multipartno_);
  }
  multipartuniqueid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.multipartuniqueid().size() > 0) {
    multipartuniqueid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.multipartuniqueid_);
  }
  list_object_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.list_object().size() > 0) {
    list_object_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.list_object_);
  }
  ::memcpy(&objectop_, &from.objectop_,
    static_cast<size_t>(reinterpret_cast<char*>(&len_) -
    reinterpret_cast<char*>(&objectop_)) + sizeof(len_));
  // @@protoc_insertion_point(copy_constructor:s3service.s3object)
}

void s3object::SharedCtor() {
  bucketname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  objectname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  objectpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  putid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  versionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  multipartno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  multipartuniqueid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  list_object_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&objectop_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&len_) -
      reinterpret_cast<char*>(&objectop_)) + sizeof(len_));
}

s3object::~s3object() {
  // @@protoc_insertion_point(destructor:s3service.s3object)
  SharedDtor();
}

void s3object::SharedDtor() {
  bucketname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  objectname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  objectpath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  putid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  versionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  multipartno_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  multipartuniqueid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  list_object_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void s3object::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* s3object::descriptor() {
  ::protobuf_s3service_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s3service_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const s3object& s3object::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s3service_2eproto::scc_info_s3object.base);
  return *internal_default_instance();
}


void s3object::Clear() {
// @@protoc_insertion_point(message_clear_start:s3service.s3object)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  auth_.Clear();
  errorinfo_.Clear();
  multipartlist_.Clear();
  bucketname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  objectname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  objectpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  putid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  versionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  multipartno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  multipartuniqueid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  list_object_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&objectop_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&len_) -
      reinterpret_cast<char*>(&objectop_)) + sizeof(len_));
  _internal_metadata_.Clear();
}

bool s3object::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s3service.s3object)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .s3service.s3object.objectOperation objectOp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_objectop(static_cast< ::s3service::s3object_objectOperation >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .s3service.s3authorization auth = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_auth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .s3service.errorDetails errorInfo = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_errorinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string bucketName = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bucketname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bucketname().data(), static_cast<int>(this->bucketname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s3service.s3object.bucketName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string objectName = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_objectname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->objectname().data(), static_cast<int>(this->objectname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s3service.s3object.objectName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 len = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &len_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string objectPath = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_objectpath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->objectpath().data(), static_cast<int>(this->objectpath().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s3service.s3object.objectPath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string tag = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tag().data(), static_cast<int>(this->tag().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s3service.s3object.tag"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string putId = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_putid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->putid().data(), static_cast<int>(this->putid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s3service.s3object.putId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string versionId = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_versionid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->versionid().data(), static_cast<int>(this->versionid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s3service.s3object.versionId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string multiPartList = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_multipartlist()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->multipartlist(this->multipartlist_size() - 1).data(),
            static_cast<int>(this->multipartlist(this->multipartlist_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s3service.s3object.multiPartList"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string multiPartNo = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_multipartno()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->multipartno().data(), static_cast<int>(this->multipartno().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s3service.s3object.multiPartNo"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string multiPartUniqueId = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_multipartuniqueid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->multipartuniqueid().data(), static_cast<int>(this->multipartuniqueid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s3service.s3object.multiPartUniqueId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string list_object = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_list_object()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->list_object().data(), static_cast<int>(this->list_object().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s3service.s3object.list_object"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s3service.s3object)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s3service.s3object)
  return false;
#undef DO_
}

void s3object::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s3service.s3object)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .s3service.s3object.objectOperation objectOp = 1;
  if (this->objectop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->objectop(), output);
  }

  // repeated .s3service.s3authorization auth = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->auth_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->auth(static_cast<int>(i)),
      output);
  }

  // repeated .s3service.errorDetails errorInfo = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->errorinfo_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->errorinfo(static_cast<int>(i)),
      output);
  }

  // string bucketName = 4;
  if (this->bucketname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bucketname().data(), static_cast<int>(this->bucketname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3object.bucketName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->bucketname(), output);
  }

  // string objectName = 5;
  if (this->objectname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->objectname().data(), static_cast<int>(this->objectname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3object.objectName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->objectname(), output);
  }

  // int32 len = 6;
  if (this->len() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->len(), output);
  }

  // string objectPath = 7;
  if (this->objectpath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->objectpath().data(), static_cast<int>(this->objectpath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3object.objectPath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->objectpath(), output);
  }

  // string tag = 8;
  if (this->tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3object.tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->tag(), output);
  }

  // string putId = 9;
  if (this->putid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->putid().data(), static_cast<int>(this->putid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3object.putId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->putid(), output);
  }

  // string versionId = 10;
  if (this->versionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->versionid().data(), static_cast<int>(this->versionid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3object.versionId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->versionid(), output);
  }

  // repeated string multiPartList = 11;
  for (int i = 0, n = this->multipartlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->multipartlist(i).data(), static_cast<int>(this->multipartlist(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3object.multiPartList");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->multipartlist(i), output);
  }

  // string multiPartNo = 12;
  if (this->multipartno().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->multipartno().data(), static_cast<int>(this->multipartno().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3object.multiPartNo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->multipartno(), output);
  }

  // string multiPartUniqueId = 13;
  if (this->multipartuniqueid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->multipartuniqueid().data(), static_cast<int>(this->multipartuniqueid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3object.multiPartUniqueId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->multipartuniqueid(), output);
  }

  // string list_object = 14;
  if (this->list_object().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->list_object().data(), static_cast<int>(this->list_object().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3object.list_object");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->list_object(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:s3service.s3object)
}

::google::protobuf::uint8* s3object::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:s3service.s3object)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .s3service.s3object.objectOperation objectOp = 1;
  if (this->objectop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->objectop(), target);
  }

  // repeated .s3service.s3authorization auth = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->auth_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->auth(static_cast<int>(i)), deterministic, target);
  }

  // repeated .s3service.errorDetails errorInfo = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->errorinfo_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->errorinfo(static_cast<int>(i)), deterministic, target);
  }

  // string bucketName = 4;
  if (this->bucketname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bucketname().data(), static_cast<int>(this->bucketname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3object.bucketName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->bucketname(), target);
  }

  // string objectName = 5;
  if (this->objectname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->objectname().data(), static_cast<int>(this->objectname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3object.objectName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->objectname(), target);
  }

  // int32 len = 6;
  if (this->len() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->len(), target);
  }

  // string objectPath = 7;
  if (this->objectpath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->objectpath().data(), static_cast<int>(this->objectpath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3object.objectPath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->objectpath(), target);
  }

  // string tag = 8;
  if (this->tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3object.tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->tag(), target);
  }

  // string putId = 9;
  if (this->putid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->putid().data(), static_cast<int>(this->putid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3object.putId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->putid(), target);
  }

  // string versionId = 10;
  if (this->versionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->versionid().data(), static_cast<int>(this->versionid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3object.versionId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->versionid(), target);
  }

  // repeated string multiPartList = 11;
  for (int i = 0, n = this->multipartlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->multipartlist(i).data(), static_cast<int>(this->multipartlist(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3object.multiPartList");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(11, this->multipartlist(i), target);
  }

  // string multiPartNo = 12;
  if (this->multipartno().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->multipartno().data(), static_cast<int>(this->multipartno().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3object.multiPartNo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->multipartno(), target);
  }

  // string multiPartUniqueId = 13;
  if (this->multipartuniqueid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->multipartuniqueid().data(), static_cast<int>(this->multipartuniqueid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3object.multiPartUniqueId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->multipartuniqueid(), target);
  }

  // string list_object = 14;
  if (this->list_object().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->list_object().data(), static_cast<int>(this->list_object().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.s3object.list_object");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->list_object(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s3service.s3object)
  return target;
}

size_t s3object::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s3service.s3object)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .s3service.s3authorization auth = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->auth_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->auth(static_cast<int>(i)));
    }
  }

  // repeated .s3service.errorDetails errorInfo = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->errorinfo_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->errorinfo(static_cast<int>(i)));
    }
  }

  // repeated string multiPartList = 11;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->multipartlist_size());
  for (int i = 0, n = this->multipartlist_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->multipartlist(i));
  }

  // string bucketName = 4;
  if (this->bucketname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bucketname());
  }

  // string objectName = 5;
  if (this->objectname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->objectname());
  }

  // string objectPath = 7;
  if (this->objectpath().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->objectpath());
  }

  // string tag = 8;
  if (this->tag().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tag());
  }

  // string putId = 9;
  if (this->putid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->putid());
  }

  // string versionId = 10;
  if (this->versionid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->versionid());
  }

  // string multiPartNo = 12;
  if (this->multipartno().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->multipartno());
  }

  // string multiPartUniqueId = 13;
  if (this->multipartuniqueid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->multipartuniqueid());
  }

  // string list_object = 14;
  if (this->list_object().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->list_object());
  }

  // .s3service.s3object.objectOperation objectOp = 1;
  if (this->objectop() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->objectop());
  }

  // int32 len = 6;
  if (this->len() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->len());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void s3object::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s3service.s3object)
  GOOGLE_DCHECK_NE(&from, this);
  const s3object* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const s3object>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s3service.s3object)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s3service.s3object)
    MergeFrom(*source);
  }
}

void s3object::MergeFrom(const s3object& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s3service.s3object)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  auth_.MergeFrom(from.auth_);
  errorinfo_.MergeFrom(from.errorinfo_);
  multipartlist_.MergeFrom(from.multipartlist_);
  if (from.bucketname().size() > 0) {

    bucketname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bucketname_);
  }
  if (from.objectname().size() > 0) {

    objectname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.objectname_);
  }
  if (from.objectpath().size() > 0) {

    objectpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.objectpath_);
  }
  if (from.tag().size() > 0) {

    tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  if (from.putid().size() > 0) {

    putid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.putid_);
  }
  if (from.versionid().size() > 0) {

    versionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.versionid_);
  }
  if (from.multipartno().size() > 0) {

    multipartno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.multipartno_);
  }
  if (from.multipartuniqueid().size() > 0) {

    multipartuniqueid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.multipartuniqueid_);
  }
  if (from.list_object().size() > 0) {

    list_object_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.list_object_);
  }
  if (from.objectop() != 0) {
    set_objectop(from.objectop());
  }
  if (from.len() != 0) {
    set_len(from.len());
  }
}

void s3object::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s3service.s3object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s3object::CopyFrom(const s3object& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s3service.s3object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s3object::IsInitialized() const {
  return true;
}

void s3object::Swap(s3object* other) {
  if (other == this) return;
  InternalSwap(other);
}
void s3object::InternalSwap(s3object* other) {
  using std::swap;
  CastToBase(&auth_)->InternalSwap(CastToBase(&other->auth_));
  CastToBase(&errorinfo_)->InternalSwap(CastToBase(&other->errorinfo_));
  multipartlist_.InternalSwap(CastToBase(&other->multipartlist_));
  bucketname_.Swap(&other->bucketname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  objectname_.Swap(&other->objectname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  objectpath_.Swap(&other->objectpath_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tag_.Swap(&other->tag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  putid_.Swap(&other->putid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  versionid_.Swap(&other->versionid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  multipartno_.Swap(&other->multipartno_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  multipartuniqueid_.Swap(&other->multipartuniqueid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  list_object_.Swap(&other->list_object_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(objectop_, other->objectop_);
  swap(len_, other->len_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata s3object::GetMetadata() const {
  protobuf_s3service_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s3service_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void serviceRequestResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int serviceRequestResponse::kEntityTypeFieldNumber;
const int serviceRequestResponse::kRequestIdFieldNumber;
const int serviceRequestResponse::kUserFieldNumber;
const int serviceRequestResponse::kAccountFieldNumber;
const int serviceRequestResponse::kBucketFieldNumber;
const int serviceRequestResponse::kObjectFieldNumber;
const int serviceRequestResponse::kAccesskeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

serviceRequestResponse::serviceRequestResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s3service_2eproto::scc_info_serviceRequestResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:s3service.serviceRequestResponse)
}
serviceRequestResponse::serviceRequestResponse(const serviceRequestResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      user_(from.user_),
      account_(from.account_),
      bucket_(from.bucket_),
      object_(from.object_),
      accesskey_(from.accesskey_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  requestid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.requestid().size() > 0) {
    requestid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.requestid_);
  }
  entitytype_ = from.entitytype_;
  // @@protoc_insertion_point(copy_constructor:s3service.serviceRequestResponse)
}

void serviceRequestResponse::SharedCtor() {
  requestid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  entitytype_ = 0;
}

serviceRequestResponse::~serviceRequestResponse() {
  // @@protoc_insertion_point(destructor:s3service.serviceRequestResponse)
  SharedDtor();
}

void serviceRequestResponse::SharedDtor() {
  requestid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void serviceRequestResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* serviceRequestResponse::descriptor() {
  ::protobuf_s3service_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s3service_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const serviceRequestResponse& serviceRequestResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s3service_2eproto::scc_info_serviceRequestResponse.base);
  return *internal_default_instance();
}


void serviceRequestResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:s3service.serviceRequestResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_.Clear();
  account_.Clear();
  bucket_.Clear();
  object_.Clear();
  accesskey_.Clear();
  requestid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  entitytype_ = 0;
  _internal_metadata_.Clear();
}

bool serviceRequestResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s3service.serviceRequestResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .s3service.serviceRequestResponse.serviceEntity entityType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_entitytype(static_cast< ::s3service::serviceRequestResponse_serviceEntity >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string requestId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_requestid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->requestid().data(), static_cast<int>(this->requestid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s3service.serviceRequestResponse.requestId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .s3service.s3user user = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .s3service.s3account account = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .s3service.s3bucket bucket = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_bucket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .s3service.s3object object = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_object()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .s3service.s3accesskey accesskey = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_accesskey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s3service.serviceRequestResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s3service.serviceRequestResponse)
  return false;
#undef DO_
}

void serviceRequestResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s3service.serviceRequestResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .s3service.serviceRequestResponse.serviceEntity entityType = 1;
  if (this->entitytype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->entitytype(), output);
  }

  // string requestId = 2;
  if (this->requestid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->requestid().data(), static_cast<int>(this->requestid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.serviceRequestResponse.requestId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->requestid(), output);
  }

  // repeated .s3service.s3user user = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->user_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->user(static_cast<int>(i)),
      output);
  }

  // repeated .s3service.s3account account = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->account_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->account(static_cast<int>(i)),
      output);
  }

  // repeated .s3service.s3bucket bucket = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bucket_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->bucket(static_cast<int>(i)),
      output);
  }

  // repeated .s3service.s3object object = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->object_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->object(static_cast<int>(i)),
      output);
  }

  // repeated .s3service.s3accesskey accesskey = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->accesskey_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->accesskey(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:s3service.serviceRequestResponse)
}

::google::protobuf::uint8* serviceRequestResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:s3service.serviceRequestResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .s3service.serviceRequestResponse.serviceEntity entityType = 1;
  if (this->entitytype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->entitytype(), target);
  }

  // string requestId = 2;
  if (this->requestid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->requestid().data(), static_cast<int>(this->requestid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s3service.serviceRequestResponse.requestId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->requestid(), target);
  }

  // repeated .s3service.s3user user = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->user_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->user(static_cast<int>(i)), deterministic, target);
  }

  // repeated .s3service.s3account account = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->account_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->account(static_cast<int>(i)), deterministic, target);
  }

  // repeated .s3service.s3bucket bucket = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bucket_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->bucket(static_cast<int>(i)), deterministic, target);
  }

  // repeated .s3service.s3object object = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->object_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->object(static_cast<int>(i)), deterministic, target);
  }

  // repeated .s3service.s3accesskey accesskey = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->accesskey_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->accesskey(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s3service.serviceRequestResponse)
  return target;
}

size_t serviceRequestResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s3service.serviceRequestResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .s3service.s3user user = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->user_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->user(static_cast<int>(i)));
    }
  }

  // repeated .s3service.s3account account = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->account_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->account(static_cast<int>(i)));
    }
  }

  // repeated .s3service.s3bucket bucket = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->bucket_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->bucket(static_cast<int>(i)));
    }
  }

  // repeated .s3service.s3object object = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->object_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->object(static_cast<int>(i)));
    }
  }

  // repeated .s3service.s3accesskey accesskey = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->accesskey_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->accesskey(static_cast<int>(i)));
    }
  }

  // string requestId = 2;
  if (this->requestid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->requestid());
  }

  // .s3service.serviceRequestResponse.serviceEntity entityType = 1;
  if (this->entitytype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->entitytype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void serviceRequestResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s3service.serviceRequestResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const serviceRequestResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const serviceRequestResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s3service.serviceRequestResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s3service.serviceRequestResponse)
    MergeFrom(*source);
  }
}

void serviceRequestResponse::MergeFrom(const serviceRequestResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s3service.serviceRequestResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_.MergeFrom(from.user_);
  account_.MergeFrom(from.account_);
  bucket_.MergeFrom(from.bucket_);
  object_.MergeFrom(from.object_);
  accesskey_.MergeFrom(from.accesskey_);
  if (from.requestid().size() > 0) {

    requestid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.requestid_);
  }
  if (from.entitytype() != 0) {
    set_entitytype(from.entitytype());
  }
}

void serviceRequestResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s3service.serviceRequestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void serviceRequestResponse::CopyFrom(const serviceRequestResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s3service.serviceRequestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool serviceRequestResponse::IsInitialized() const {
  return true;
}

void serviceRequestResponse::Swap(serviceRequestResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void serviceRequestResponse::InternalSwap(serviceRequestResponse* other) {
  using std::swap;
  CastToBase(&user_)->InternalSwap(CastToBase(&other->user_));
  CastToBase(&account_)->InternalSwap(CastToBase(&other->account_));
  CastToBase(&bucket_)->InternalSwap(CastToBase(&other->bucket_));
  CastToBase(&object_)->InternalSwap(CastToBase(&other->object_));
  CastToBase(&accesskey_)->InternalSwap(CastToBase(&other->accesskey_));
  requestid_.Swap(&other->requestid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(entitytype_, other->entitytype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata serviceRequestResponse::GetMetadata() const {
  protobuf_s3service_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s3service_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace s3service
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::s3service::s3authorization* Arena::CreateMaybeMessage< ::s3service::s3authorization >(Arena* arena) {
  return Arena::CreateInternal< ::s3service::s3authorization >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::s3service::errorDetails* Arena::CreateMaybeMessage< ::s3service::errorDetails >(Arena* arena) {
  return Arena::CreateInternal< ::s3service::errorDetails >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::s3service::s3accesskey* Arena::CreateMaybeMessage< ::s3service::s3accesskey >(Arena* arena) {
  return Arena::CreateInternal< ::s3service::s3accesskey >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::s3service::s3account* Arena::CreateMaybeMessage< ::s3service::s3account >(Arena* arena) {
  return Arena::CreateInternal< ::s3service::s3account >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::s3service::s3user* Arena::CreateMaybeMessage< ::s3service::s3user >(Arena* arena) {
  return Arena::CreateInternal< ::s3service::s3user >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::s3service::tags* Arena::CreateMaybeMessage< ::s3service::tags >(Arena* arena) {
  return Arena::CreateInternal< ::s3service::tags >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::s3service::s3bucket* Arena::CreateMaybeMessage< ::s3service::s3bucket >(Arena* arena) {
  return Arena::CreateInternal< ::s3service::s3bucket >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::s3service::s3object* Arena::CreateMaybeMessage< ::s3service::s3object >(Arena* arena) {
  return Arena::CreateInternal< ::s3service::s3object >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::s3service::serviceRequestResponse* Arena::CreateMaybeMessage< ::s3service::serviceRequestResponse >(Arena* arena) {
  return Arena::CreateInternal< ::s3service::serviceRequestResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
